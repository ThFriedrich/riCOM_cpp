/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package as.hdfql;

public class HDFql implements HDFqlConstants {

		@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
		@java.lang.annotation.Target(java.lang.annotation.ElementType.FIELD)
		public @interface Map
		{
			String member();
		}


		@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
		@java.lang.annotation.Target(java.lang.annotation.ElementType.FIELD)
		public @interface Ignore
		{

		}


		private static Variable variableList[] = {null, null, null, null, null};


		static
		{
			Runtime.getRuntime().addShutdownHook(new Thread(()->variableUnregisterAll()));
			javaSetEnvironment();
		}


		private HDFql()   // set constructor visibility to private to disable instantiation of the class
		{

		}


		private static class Variable
		{
			public Object variable;
			public Class type;

			public Variable(Object variable, Class type)
			{
				this.variable = variable;
				this.type = type;
			}
		}


		public static int execute(String script)
		{
			int status;
			int i;

			if (script == null)
			{
				return executeReset();
			}

			status = execute(script, script.length(), JAVA);
			if ((status & 0x100) != 0)   // check if a transient variable was used
			{
				for(i = 0; i < 5; i++)
				{
					if ((status & (1 << (i + 9))) != 0)
					{
						variableList[i] = null;
					}
				}
				status &= 0x000000FF;
			}

			if (status > 127)
			{
				return status - 256;
			}
			else
			{
				return status;
			}
		}


		public static int cursorInitialize()
		{
			return cursorInitialize(null);
		}


		public static int cursorClear()
		{
			return cursorClear(null);
		}


		public static int cursorClone(HDFqlCursor cursorClone)
		{
			return cursorClone(null, cursorClone);
		}


		public static int cursorGetDataType()
		{
			return cursorGetDataType(null);
		}


		public static int cursorGetCount()
		{
			return cursorGetCount(null);
		}


		public static int subcursorGetCount()
		{
			return subcursorGetCount(null);
		}


		public static int cursorGetPosition()
		{
			return cursorGetPosition(null);
		}


		public static int subcursorGetPosition()
		{
			return subcursorGetPosition(null);
		}


		public static int cursorFirst()
		{
			return cursorFirst(null);
		}


		public static int subcursorFirst()
		{
			return subcursorFirst(null);
		}


		public static int cursorLast()
		{
			return cursorLast(null);
		}


		public static int subcursorLast()
		{
			return subcursorLast(null);
		}


		public static int cursorNext()
		{
			return cursorNext(null);
		}


		public static int subcursorNext()
		{
			return subcursorNext(null);
		}


		public static int cursorPrevious()
		{
			return cursorPrevious(null);
		}


		public static int subcursorPrevious()
		{
			return subcursorPrevious(null);
		}


		public static int cursorAbsolute(int position)
		{
			return cursorAbsolute(null, position);
		}


		public static int subcursorAbsolute(int position)
		{
			return subcursorAbsolute(null, position);
		}


		public static int cursorRelative(int position)
		{
			return cursorRelative(null, position);
		}


		public static int subcursorRelative(int position)
		{
			return subcursorRelative(null, position);
		}


		public static java.lang.Byte cursorGetTinyint()
		{
			return cursorGetTinyint(null);
		}


		public static java.lang.Byte subcursorGetTinyint()
		{
			return subcursorGetTinyint(null);
		}


		public static java.lang.Byte cursorGetUnsignedTinyint()
		{
			return cursorGetUnsignedTinyint(null);
		}


		public static java.lang.Byte subcursorGetUnsignedTinyint()
		{
			return subcursorGetUnsignedTinyint(null);
		}


		public static java.lang.Short cursorGetSmallint()
		{
			return cursorGetSmallint(null);
		}


		public static java.lang.Short subcursorGetSmallint()
		{
			return subcursorGetSmallint(null);
		}


		public static java.lang.Short cursorGetUnsignedSmallint()
		{
			return cursorGetUnsignedSmallint(null);
		}


		public static java.lang.Short subcursorGetUnsignedSmallint()
		{
			return subcursorGetUnsignedSmallint(null);
		}


		public static java.lang.Integer cursorGetInt()
		{
			return cursorGetInt(null);
		}


		public static java.lang.Integer subcursorGetInt()
		{
			return subcursorGetInt(null);
		}


		public static java.lang.Integer cursorGetUnsignedInt()
		{
			return cursorGetUnsignedInt(null);
		}


		public static java.lang.Integer subcursorGetUnsignedInt()
		{
			return subcursorGetUnsignedInt(null);
		}


		public static java.lang.Long cursorGetBigint()
		{
			return cursorGetBigint(null);
		}


		public static java.lang.Long subcursorGetBigint()
		{
			return subcursorGetBigint(null);
		}


		public static java.lang.Long cursorGetUnsignedBigint()
		{
			return cursorGetUnsignedBigint(null);
		}


		public static java.lang.Long subcursorGetUnsignedBigint()
		{
			return subcursorGetUnsignedBigint(null);
		}


		public static java.lang.Float cursorGetFloat()
		{
			return cursorGetFloat(null);
		}


		public static java.lang.Float subcursorGetFloat()
		{
			return subcursorGetFloat(null);
		}


		public static java.lang.Double cursorGetDouble()
		{
			return cursorGetDouble(null);
		}


		public static java.lang.Double subcursorGetDouble()
		{
			return subcursorGetDouble(null);
		}


		public static String cursorGetChar()
		{
			return cursorGetChar(null);
		}


		public static int variableRegister(Object variable)
		{
			return variableRegister(variable, NO);
		}


		public static int variableTransientRegister(Object variable)
		{
			return variableRegister(variable, YES);
		}


		public static int variableUnregister(Object variable)
		{
			int i;

			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					variableUnregister(i);
					variableList[i] = null;
					return SUCCESS;
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static int variableUnregisterAll()
		{
			int i;

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null)
				{
					variableUnregister(i);
					variableList[i] = null;
				}
			}

			return SUCCESS;
		}


		public static int variableGetNumber(Object variable)
		{
			int i;

			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return i;
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static int variableGetDataType(Object variable)
		{
			int i;

			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetDataType(i);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static int variableGetCount(Object variable)
		{
			int i;

			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetCount(i);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static int variableGetSize(Object variable)
		{
			int i;

			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetSize(i);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static int variableGetDimensionCount(Object variable)
		{
			int i;

			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetDimensionCount(i);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static long variableGetDimension(Object variable, int index)
		{
			int i;

			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetDimension(i, index);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		private static int variableRegister(Object variable, int variableTransient)
		{
			Object tmp;
			Class type0;
			Class type1;
			int number;
			int i;

			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			type0 = variable.getClass().getComponentType();   // get data type of variable (if variable is not an array it will return null)
			if (type0 == null)
			{
				return ERROR_UNEXPECTED_DATA_TYPE;
			}

			try
			{
				tmp = variable;
				do
				{
					tmp = java.lang.reflect.Array.get(tmp, 0);
					type1 = type0;
					type0 = tmp.getClass().getComponentType();
				}
				while(type0 != null);
			}
			catch(Exception e)
			{
				type1 = type0;
			}

			number = -1;
			for(i = 0; i < 5; i++)
			{
				if (variableList[i] == null)
				{
					if (number == -1)
					{
						number = i;
					}
				}
				else
				{
					if (variable.equals(variableList[i].variable))
					{
						variableRegisterWithFields(i, variableTransient, null);
						return i;
					}
				}
			}

			if (number == -1)
			{
				return ERROR_FULL;
			}

			variableList[number] = new Variable(variable, type1);

			if (type1 == byte.class || type1 == Byte.class || type1 == short.class || type1 == Short.class || type1 == int.class || type1 == Integer.class || type1 == long.class || type1 == Long.class || type1 == float.class || type1 == Float.class || type1 == double.class || type1 == Double.class || type1 == String.class)
			{
				variableRegisterWithFields(number, variableTransient, null);
			}
			else   // User-defined class (i.e. compound)
			{
				variableRegisterWithFields(number, variableTransient, variableGetFields(type1, null));
			}

			return number;
		}


		private static java.util.ArrayList<Object> variableGetFields(Class type, String parentName)
		{
			java.lang.reflect.Field fieldList[];
			java.util.ArrayList<Object> result;
			HDFql.Map map;
			String fieldName;
			String fullName;
			Class tmp;
			int i;

			result = null;
			fieldList = type.getDeclaredFields();
			for(i = 0; i < fieldList.length; i++)
			{
				if (fieldList[i].isAnnotationPresent(HDFql.Ignore.class) == false)
				{
					fieldName = fieldList[i].getName();
					map = fieldList[i].getAnnotation(HDFql.Map.class);
					if (map == null)
					{
						if (parentName == null)
						{
							fullName = fieldName;
						}
						else
						{
							fullName = parentName + "." + fieldName;
						}
					}
					else
					{
						if (parentName == null)
						{
							fullName = map.member();
						}
						else
						{
							fullName = parentName + "." + map.member();
						}
					}
					if (result == null)
					{
						result = new java.util.ArrayList<Object>();
					}
					tmp = fieldList[i].getType();
					if (tmp == byte.class)   // it includes the OPAQUE data type as well
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(0);
						result.add("B");
						result.add(null);
					}
					else if (tmp == Byte.class)   // it includes the OPAQUE data type as well
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(1);
						result.add("Ljava/lang/Byte;");
						result.add(null);
					}
					else if (tmp == short.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(2);
						result.add("S");
						result.add(null);
					}
					else if (tmp == Short.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(3);
						result.add("Ljava/lang/Short;");
						result.add(null);
					}
					else if (tmp == int.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(4);
						result.add("I");
						result.add(null);
					}
					else if (tmp == Integer.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(5);
						result.add("Ljava/lang/Integer;");
						result.add(null);
					}
					else if (tmp == long.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(6);
						result.add("J");
						result.add(null);
					}
					else if (tmp == Long.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(7);
						result.add("Ljava/lang/Long;");
						result.add(null);
					}
					else if (tmp == float.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(8);
						result.add("F");
						result.add(null);
					}
					else if (tmp == Float.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(9);
						result.add("Ljava/lang/Float;");
						result.add(null);
					}
					else if (tmp == double.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(10);
						result.add("D");
						result.add(null);
					}
					else if (tmp == Double.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(11);
						result.add("Ljava/lang/Double;");
						result.add(null);
					}
					else if (tmp == String.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(12);
						result.add("Ljava/lang/String;");
						result.add(null);
					}
					else   // User-defined class (i.e. compound)
					{
						if (tmp != char.class && tmp != Character.class && fieldName.startsWith("this$") == false)
						{
							result.add(type);
							result.add(fullName);
							result.add(fieldName);
							result.add(13);
							result.add("L" + tmp.getName().replace(".", "/") + ";");
							result.add(variableGetFields(tmp, fullName));
						}
					}
				}
			}

			return result;
		}


		private static int variableCopyFrom(int number, int size)
		{
			Class type;

			type = variableList[number].type;
			if (type == byte.class)   // it includes the OPAQUE data type as well
			{
				return variableCopyFromChar(variableList[number].variable, number, size, 0);
			}
			else if (type == Byte.class)   // it includes the OPAQUE data type as well
			{
				return variableCopyFromBoxedChar(variableList[number].variable, number, size, 0);
			}
			else if (type == short.class)
			{
				return variableCopyFromShort(variableList[number].variable, number, size, 0);
			}
			else if (type == Short.class)
			{
				return variableCopyFromBoxedShort(variableList[number].variable, number, size, 0);
			}
			else if (type == int.class)
			{
				return variableCopyFromInt(variableList[number].variable, number, size, 0);
			}
			else if (type == Integer.class)
			{
				return variableCopyFromBoxedInt(variableList[number].variable, number, size, 0);
			}
			else if (type == long.class)
			{
				return variableCopyFromLong(variableList[number].variable, number, size, 0);
			}
			else if (type == Long.class)
			{
				return variableCopyFromBoxedLong(variableList[number].variable, number, size, 0);
			}
			else if (type == float.class)
			{
				return variableCopyFromFloat(variableList[number].variable, number, size, 0);
			}
			else if (type == Float.class)
			{
				return variableCopyFromBoxedFloat(variableList[number].variable, number, size, 0);
			}
			else if (type == double.class)
			{
				return variableCopyFromDouble(variableList[number].variable, number, size, 0);
			}
			else if (type == Double.class)
			{
				return variableCopyFromBoxedDouble(variableList[number].variable, number, size, 0);
			}
			else if (type == String.class)
			{
				return variableCopyFromString(variableList[number].variable, number, size, 0);
			}
			else   // User-defined class (i.e. compound)
			{
				return variableCopyFromObject(variableList[number].variable, number, size, 0);
			}
		}


		private static int variableCopyInto(int number, int size)
		{
			Class type;

			type = variableList[number].type;
			if (type == byte.class)   // it includes the OPAQUE data type as well
			{
				return variableCopyIntoChar(variableList[number].variable, number, size, 0);
			}
			else if (type == Byte.class)   // it includes the OPAQUE data type as well
			{
				return variableCopyIntoBoxedChar(variableList[number].variable, number, size, 0);
			}
			else if (type == short.class)
			{
				return variableCopyIntoShort(variableList[number].variable, number, size, 0);
			}
			else if (type == Short.class)
			{
				return variableCopyIntoBoxedShort(variableList[number].variable, number, size, 0);
			}
			else if (type == int.class)
			{
				return variableCopyIntoInt(variableList[number].variable, number, size, 0);
			}
			else if (type == Integer.class)
			{
				return variableCopyIntoBoxedInt(variableList[number].variable, number, size, 0);
			}
			else if (type == long.class)
			{
				return variableCopyIntoLong(variableList[number].variable, number, size, 0);
			}
			else if (type == Long.class)
			{
				return variableCopyIntoBoxedLong(variableList[number].variable, number, size, 0);
			}
			else if (type == float.class)
			{
				return variableCopyIntoFloat(variableList[number].variable, number, size, 0);
			}
			else if (type == Float.class)
			{
				return variableCopyIntoBoxedFloat(variableList[number].variable, number, size, 0);
			}
			else if (type == double.class)
			{
				return variableCopyIntoDouble(variableList[number].variable, number, size, 0);
			}
			else if (type == Double.class)
			{
				return variableCopyIntoBoxedDouble(variableList[number].variable, number, size, 0);
			}
			else if (type == String.class)
			{
				return variableCopyIntoString(variableList[number].variable, number, size, 0);
			}
			else   // User-defined class (i.e. compound)
			{
				return variableCopyIntoObject(variableList[number].variable, number, size, 0);
			}
		}


		private static int variableCopyFromChar(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromChar(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetChar((byte []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetChar((byte []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromBoxedChar(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromBoxedChar(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetBoxedChar((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetBoxedChar((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromShort(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromShort(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetShort((short []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetShort((short []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromBoxedShort(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromBoxedShort(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetBoxedShort((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetBoxedShort((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromInt(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromInt(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetInt((int []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetInt((int []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromBoxedInt(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromBoxedInt(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetBoxedInt((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetBoxedInt((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromLong(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromLong(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetLong((long []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetLong((long []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromBoxedLong(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromBoxedLong(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetBoxedLong((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetBoxedLong((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromFloat(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromFloat(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetFloat((float []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetFloat((float []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromBoxedFloat(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromBoxedFloat(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetBoxedFloat((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetBoxedFloat((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromDouble(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromDouble(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetDouble((double []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetDouble((double []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromBoxedDouble(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromBoxedDouble(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetBoxedDouble((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetBoxedDouble((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromString(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromString(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetString((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetString((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyFromObject(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyFromObject(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableSetObject((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableSetObject((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoChar(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoChar(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetChar((byte []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetChar((byte []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoBoxedChar(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoBoxedChar(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetBoxedChar((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetBoxedChar((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoShort(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoShort(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetShort((short []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetShort((short []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoBoxedShort(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoBoxedShort(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetBoxedShort((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetBoxedShort((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoInt(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoInt(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetInt((int []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetInt((int []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoBoxedInt(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoBoxedInt(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetBoxedInt((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetBoxedInt((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoLong(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoLong(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetLong((long []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetLong((long []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoBoxedLong(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoBoxedLong(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetBoxedLong((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetBoxedLong((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoFloat(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoFloat(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetFloat((float []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetFloat((float []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoBoxedFloat(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoBoxedFloat(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetBoxedFloat((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetBoxedFloat((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoDouble(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoDouble(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetDouble((double []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetDouble((double []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoBoxedDouble(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoBoxedDouble(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetBoxedDouble((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetBoxedDouble((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoString(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoString(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetString((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetString((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}


		private static int variableCopyIntoObject(Object variable, int number, int size, int count)
		{
			boolean flag;
			int length;
			int i;

			length = java.lang.reflect.Array.getLength(variable);
			try
			{
				flag = java.lang.reflect.Array.get(variable, 0).getClass().isArray();
			}
			catch(Exception e)
			{
				flag = false;
			}

			if (flag == true)
			{
				for(i = 0; i < length && count < size; i++)
				{
					count = variableCopyIntoObject(java.lang.reflect.Array.get(variable, i), number, size, count);
				}
			}
			else
			{
				i = size - count;
				if (i > 0)
				{
					if (length < i)
					{
						variableGetObject((Object []) variable, number, count, length);
						count += length;
					}
					else
					{
						variableGetObject((Object []) variable, number, count, i);
						count += i;
					}
				}
			}

			return count;
		}
	
  public static int executeGetStatus() {
    return HDFqlJNI.executeGetStatus();
  }

  public static int errorGetLine() {
    return HDFqlJNI.errorGetLine();
  }

  public static int errorGetPosition() {
    return HDFqlJNI.errorGetPosition();
  }

  public static String errorGetMessage() {
    return HDFqlJNI.errorGetMessage();
  }

  public static int mpiGetSize() {
    return HDFqlJNI.mpiGetSize();
  }

  public static int mpiGetRank() {
    return HDFqlJNI.mpiGetRank();
  }

  private static int execute(String script, int scriptSize, int programmingLanguage) {
    return HDFqlJNI.execute(script, scriptSize, programmingLanguage);
  }

  private static int executeReset() {
    return HDFqlJNI.executeReset();
  }

  private static void variableRegisterWithFields(int number, int variableTransient, Object variableFieldList) {
    HDFqlJNI.variableRegisterWithFields(number, variableTransient, variableFieldList);
  }

  private static void variableUnregister(int number) {
    HDFqlJNI.variableUnregister(number);
  }

  private static int variableGetDataType(int number) {
    return HDFqlJNI.variableGetDataType(number);
  }

  private static int variableGetCount(int number) {
    return HDFqlJNI.variableGetCount(number);
  }

  private static int variableGetSize(int number) {
    return HDFqlJNI.variableGetSize(number);
  }

  private static int variableGetDimensionCount(int number) {
    return HDFqlJNI.variableGetDimensionCount(number);
  }

  private static long variableGetDimension(int number, int index) {
    return HDFqlJNI.variableGetDimension(number, index);
  }

  public static int cursorInitialize(HDFqlCursor cursor) {
    return HDFqlJNI.cursorInitialize(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorUse(HDFqlCursor cursor) {
    return HDFqlJNI.cursorUse(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorUseDefault() {
    return HDFqlJNI.cursorUseDefault();
  }

  public static int cursorClear(HDFqlCursor cursor) {
    return HDFqlJNI.cursorClear(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorClone(HDFqlCursor cursorOriginal, HDFqlCursor cursorClone) {
    return HDFqlJNI.cursorClone(HDFqlCursor.getCPtr(cursorOriginal), cursorOriginal, HDFqlCursor.getCPtr(cursorClone), cursorClone);
  }

  public static int cursorGetDataType(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetDataType(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorGetCount(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetCount(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorGetCount(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorGetCount(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorGetPosition(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetPosition(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorGetPosition(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorGetPosition(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorFirst(HDFqlCursor cursor) {
    return HDFqlJNI.cursorFirst(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorFirst(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorFirst(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorLast(HDFqlCursor cursor) {
    return HDFqlJNI.cursorLast(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorLast(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorLast(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorNext(HDFqlCursor cursor) {
    return HDFqlJNI.cursorNext(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorNext(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorNext(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorPrevious(HDFqlCursor cursor) {
    return HDFqlJNI.cursorPrevious(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorPrevious(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorPrevious(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorAbsolute(HDFqlCursor cursor, int position) {
    return HDFqlJNI.cursorAbsolute(HDFqlCursor.getCPtr(cursor), cursor, position);
  }

  public static int subcursorAbsolute(HDFqlCursor cursor, int position) {
    return HDFqlJNI.subcursorAbsolute(HDFqlCursor.getCPtr(cursor), cursor, position);
  }

  public static int cursorRelative(HDFqlCursor cursor, int position) {
    return HDFqlJNI.cursorRelative(HDFqlCursor.getCPtr(cursor), cursor, position);
  }

  public static int subcursorRelative(HDFqlCursor cursor, int position) {
    return HDFqlJNI.subcursorRelative(HDFqlCursor.getCPtr(cursor), cursor, position);
  }

  public static java.lang.Byte cursorGetTinyint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetTinyint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Byte((byte) convertChar(pointer));
	}

  public static java.lang.Byte subcursorGetTinyint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetTinyint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Byte((byte) convertChar(pointer));
	}

  public static java.lang.Byte cursorGetUnsignedTinyint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetUnsignedTinyint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Byte((byte) convertChar(pointer));
	}

  public static java.lang.Byte subcursorGetUnsignedTinyint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetUnsignedTinyint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Byte((byte) convertChar(pointer));
	}

  public static java.lang.Short cursorGetSmallint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetSmallint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Short(convertShort(pointer));
	}

  public static java.lang.Short subcursorGetSmallint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetSmallint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Short(convertShort(pointer));
	}

  public static java.lang.Short cursorGetUnsignedSmallint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetUnsignedSmallint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Short(convertShort(pointer));
	}

  public static java.lang.Short subcursorGetUnsignedSmallint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetUnsignedSmallint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Short(convertShort(pointer));
	}

  public static java.lang.Integer cursorGetInt(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetInt(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Integer(convertInt(pointer));
	}

  public static java.lang.Integer subcursorGetInt(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetInt(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Integer(convertInt(pointer));
	}

  public static java.lang.Integer cursorGetUnsignedInt(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetUnsignedInt(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Integer(convertInt(pointer));
	}

  public static java.lang.Integer subcursorGetUnsignedInt(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetUnsignedInt(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Integer(convertInt(pointer));
	}

  public static java.lang.Long cursorGetBigint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetBigint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Long(convertLong(pointer));
	}

  public static java.lang.Long subcursorGetBigint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetBigint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Long(convertLong(pointer));
	}

  public static java.lang.Long cursorGetUnsignedBigint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetUnsignedBigint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Long(convertLong(pointer));
	}

  public static java.lang.Long subcursorGetUnsignedBigint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetUnsignedBigint(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Long(convertLong(pointer));
	}

  public static java.lang.Float cursorGetFloat(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetFloat(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Float(convertFloat(pointer));
	}

  public static java.lang.Float subcursorGetFloat(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetFloat(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Float(convertFloat(pointer));
	}

  public static java.lang.Double cursorGetDouble(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetDouble(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Double(convertDouble(pointer));
	}

  public static java.lang.Double subcursorGetDouble(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetDouble(HDFqlCursor.getCPtr(cursor), cursor);

		if (pointer == 0)
		{
			return null;
		}

		return new java.lang.Double(convertDouble(pointer));
	}

  public static String cursorGetChar(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetChar(HDFqlCursor.getCPtr(cursor), cursor);
  }

  private static void javaSetEnvironment() {
    HDFqlJNI.javaSetEnvironment();
  }

  private static void variableSetChar(byte[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetChar(variable, number, position, size);
  }

  private static void variableSetBoxedChar(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetBoxedChar(variable, number, position, size);
  }

  private static void variableSetShort(short[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetShort(variable, number, position, size);
  }

  private static void variableSetBoxedShort(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetBoxedShort(variable, number, position, size);
  }

  private static void variableSetInt(int[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetInt(variable, number, position, size);
  }

  private static void variableSetBoxedInt(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetBoxedInt(variable, number, position, size);
  }

  private static void variableSetLong(long[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetLong(variable, number, position, size);
  }

  private static void variableSetBoxedLong(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetBoxedLong(variable, number, position, size);
  }

  private static void variableSetFloat(float[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetFloat(variable, number, position, size);
  }

  private static void variableSetBoxedFloat(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetBoxedFloat(variable, number, position, size);
  }

  private static void variableSetDouble(double[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetDouble(variable, number, position, size);
  }

  private static void variableSetBoxedDouble(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetBoxedDouble(variable, number, position, size);
  }

  private static void variableSetString(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetString(variable, number, position, size);
  }

  private static void variableSetObject(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableSetObject(variable, number, position, size);
  }

  private static void variableGetChar(byte[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetChar(variable, number, position, size);
  }

  private static void variableGetBoxedChar(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetBoxedChar(variable, number, position, size);
  }

  private static void variableGetShort(short[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetShort(variable, number, position, size);
  }

  private static void variableGetBoxedShort(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetBoxedShort(variable, number, position, size);
  }

  private static void variableGetInt(int[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetInt(variable, number, position, size);
  }

  private static void variableGetBoxedInt(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetBoxedInt(variable, number, position, size);
  }

  private static void variableGetLong(long[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetLong(variable, number, position, size);
  }

  private static void variableGetBoxedLong(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetBoxedLong(variable, number, position, size);
  }

  private static void variableGetFloat(float[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetFloat(variable, number, position, size);
  }

  private static void variableGetBoxedFloat(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetBoxedFloat(variable, number, position, size);
  }

  private static void variableGetDouble(double[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetDouble(variable, number, position, size);
  }

  private static void variableGetBoxedDouble(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetBoxedDouble(variable, number, position, size);
  }

  private static void variableGetString(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetString(variable, number, position, size);
  }

  private static void variableGetObject(Object[] variable, int number, int position, int size) {
    HDFqlJNI.variableGetObject(variable, number, position, size);
  }

  private static char convertChar(long pointer) {
    return HDFqlJNI.convertChar(pointer);
  }

  private static short convertShort(long pointer) {
    return HDFqlJNI.convertShort(pointer);
  }

  private static int convertInt(long pointer) {
    return HDFqlJNI.convertInt(pointer);
  }

  private static long convertLong(long pointer) {
    return HDFqlJNI.convertLong(pointer);
  }

  private static float convertFloat(long pointer) {
    return HDFqlJNI.convertFloat(pointer);
  }

  private static double convertDouble(long pointer) {
    return HDFqlJNI.convertDouble(pointer);
  }

}

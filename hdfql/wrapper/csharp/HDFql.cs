//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AS.HDFql {

		using System;
		using System.Runtime.InteropServices;
	
public class HDFql {

		private static Variable []variableList = {null, null, null, null, null};


		private HDFql()   // set constructor visibility to private to disable instantiation of the class
		{

		}


		private class Variable
		{
			public object variable;
			public GCHandle handle;
			public IntPtr address;

			public Variable(object variable)
			{
				this.variable = variable;
				this.handle = GCHandle.Alloc(this.variable, GCHandleType.Pinned);
				this.address = this.handle.AddrOfPinnedObject();
			}
		}


		private static int VariableRegister(object variable, int variableTransient)
		{
			Type type;
			Type elementType;
			int number;
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}

			type = variable.GetType();
			if (type.IsArray == false)   // only arrays are allowed (otherwise it is not possible to have a "real" reference of the object being registered)
			{
				return ErrorUnexpectedDataType;
			}

			elementType = type.GetElementType();
			if (elementType != typeof(sbyte) && elementType != typeof(byte) && elementType != typeof(short) && elementType != typeof(ushort) && elementType != typeof(int) && elementType != typeof(uint) && elementType != typeof(long) && elementType != typeof(ulong) && elementType != typeof(float) && elementType != typeof(double) && elementType.IsValueType == true && elementType.IsEnum == true)   // no need to test for build-in types since in C sharp primitive types (e.g. sbyte) are aliases for build-in types (e.g. SByte)
			{
				return ErrorUnexpectedDataType;
			}

			number = -1;
			for(i = 0; i < 5; i++)
			{
				if (variableList[i] == null)
				{
					if (number == -1)
					{
						number = i;
					}
				}
				else
				{
					if (Equals(variable, variableList[i].variable))
					{
						VariableRegister(i, variableTransient, variableList[i].address);
						return i;
					}
				}
			}

			if (number == -1)
			{
				return ErrorFull;
			}

			try
			{
				variableList[number] = new Variable(variable);
				VariableRegister(number, variableTransient, variableList[number].address);
				return number;
			}
			catch
			{
				return ErrorUnexpectedDataType;
			}
		}


		public static int Execute(string script)
		{
			int status;
			int i;

			if (script == null)
			{
				return ExecuteReset();
			}

			status = Execute(script, script.Length, CSharp);
			if ((status & 0x100) != 0)   // check if a transient variable was used
			{
				for(i = 0; i < 5; i++)
				{
					if ((status & (1 << (i + 9))) != 0)
					{
						variableList[i].handle.Free();
						variableList[i] = null;
					}
				}
				status &= 0x000000FF;
			}

			if (status > 127)
			{
				return status - 256;
			}
			else
			{
				return status;
			}
		}


		public static int CursorInitialize()
		{
			return CursorInitialize(null);
		}


		public static int CursorClear()
		{
			return CursorClear(null);
		}


		public static int CursorClone(HDFqlCursor cursorClone)
		{
			return CursorClone(null, cursorClone);
		}


		public static int CursorGetDataType()
		{
			return CursorGetDataType(null);
		}


		public static int CursorGetCount()
		{
			return CursorGetCount(null);
		}


		public static int SubcursorGetCount()
		{
			return SubcursorGetCount(null);
		}


		public static int CursorGetPosition()
		{
			return CursorGetPosition(null);
		}


		public static int SubcursorGetPosition()
		{
			return SubcursorGetPosition(null);
		}


		public static int CursorFirst()
		{
			return CursorFirst(null);
		}


		public static int SubcursorFirst()
		{
			return SubcursorFirst(null);
		}


		public static int CursorLast()
		{
			return CursorLast(null);
		}


		public static int SubcursorLast()
		{
			return SubcursorLast(null);
		}


		public static int CursorNext()
		{
			return CursorNext(null);
		}


		public static int SubcursorNext()
		{
			return SubcursorNext(null);
		}


		public static int CursorPrevious()
		{
			return CursorPrevious(null);
		}


		public static int SubcursorPrevious()
		{
			return SubcursorPrevious(null);
		}


		public static int CursorAbsolute(int position)
		{
			return CursorAbsolute(null, position);
		}


		public static int SubcursorAbsolute(int position)
		{
			return SubcursorAbsolute(null, position);
		}


		public static int CursorRelative(int position)
		{
			return CursorRelative(null, position);
		}


		public static int SubcursorRelative(int position)
		{
			return SubcursorRelative(null, position);
		}


		public static sbyte ? CursorGetTinyint()
		{
			return CursorGetTinyint(null);
		}


		public static sbyte ? SubcursorGetTinyint()
		{
			return SubcursorGetTinyint(null);
		}


		public static byte ? CursorGetUnsignedTinyint()
		{
			return CursorGetUnsignedTinyint(null);
		}


		public static byte ? SubcursorGetUnsignedTinyint()
		{
			return SubcursorGetUnsignedTinyint(null);
		}


		public static short ? CursorGetSmallint()
		{
			return CursorGetSmallint(null);
		}


		public static short ? SubcursorGetSmallint()
		{
			return SubcursorGetSmallint(null);
		}


		public static ushort ? CursorGetUnsignedSmallint()
		{
			return CursorGetUnsignedSmallint(null);
		}


		public static ushort ? SubcursorGetUnsignedSmallint()
		{
			return SubcursorGetUnsignedSmallint(null);
		}


		public static int ? CursorGetInt()
		{
			return CursorGetInt(null);
		}


		public static int ? SubcursorGetInt()
		{
			return SubcursorGetInt(null);
		}


		public static uint ? CursorGetUnsignedInt()
		{
			return CursorGetUnsignedInt(null);
		}


		public static uint ? SubcursorGetUnsignedInt()
		{
			return SubcursorGetUnsignedInt(null);
		}


		public static long ? CursorGetBigint()
		{
			return CursorGetBigint(null);
		}


		public static long ? SubcursorGetBigint()
		{
			return SubcursorGetBigint(null);
		}


		public static ulong ? CursorGetUnsignedBigint()
		{
			return CursorGetUnsignedBigint(null);
		}


		public static ulong ? SubcursorGetUnsignedBigint()
		{
			return SubcursorGetUnsignedBigint(null);
		}


		public static float ? CursorGetFloat()
		{
			return CursorGetFloat(null);
		}


		public static float ? SubcursorGetFloat()
		{
			return SubcursorGetFloat(null);
		}


		public static double ? CursorGetDouble()
		{
			return CursorGetDouble(null);
		}


		public static double ? SubcursorGetDouble()
		{
			return SubcursorGetDouble(null);
		}


		public static string CursorGetChar()
		{
			return CursorGetChar(null);
		}


		public static int VariableRegister(object variable)
		{
			return VariableRegister(variable, No);
		}


		public static int VariableTransientRegister(object variable)
		{
			return VariableRegister(variable, Yes);
		}


		public static int VariableUnregister(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					VariableUnregister(i);
					variableList[i].handle.Free();
					variableList[i] = null;
					return Success;
				}
			}

			return ErrorNotRegistered;
		}


		public static int VariableUnregisterAll()
		{
			int i;

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null)
				{
					VariableUnregister(i);
					variableList[i].handle.Free();
					variableList[i] = null;
				}
			}

			return Success;
		}


		public static int VariableGetNumber(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return i;
				}
			}

			return ErrorNotRegistered;
		}


		public static int VariableGetDataType(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetDataType(i);
				}
			}

			return ErrorNotRegistered;
		}


		public static int VariableGetCount(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetCount(i);
				}
			}

			return ErrorNotRegistered;
		}


		public static int VariableGetSize(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetSize(i);
				}
			}

			return ErrorNotRegistered;
		}


		public static int VariableGetDimensionCount(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetDimensionCount(i);
				}
			}

			return ErrorNotRegistered;
		}

		public static long VariableGetDimension(object variable, int index)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}

			for(i = 0; i < 5; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetDimension(i, index);
				}
			}

			return ErrorNotRegistered;
		}
	
  public static int ExecuteGetStatus() {
    int ret = HDFqlPINVOKE.ExecuteGetStatus();
    return ret;
  }

  public static int ErrorGetLine() {
    int ret = HDFqlPINVOKE.ErrorGetLine();
    return ret;
  }

  public static int ErrorGetPosition() {
    int ret = HDFqlPINVOKE.ErrorGetPosition();
    return ret;
  }

  public static string ErrorGetMessage() {
    string ret = HDFqlPINVOKE.ErrorGetMessage();
    return ret;
  }

  public static int MpiGetSize() {
    int ret = HDFqlPINVOKE.MpiGetSize();
    return ret;
  }

  public static int MpiGetRank() {
    int ret = HDFqlPINVOKE.MpiGetRank();
    return ret;
  }

  private static int Execute(string script, int scriptSize, int programmingLanguage) {
    int ret = HDFqlPINVOKE.Execute(script, scriptSize, programmingLanguage);
    return ret;
  }

  private static int ExecuteReset() {
    int ret = HDFqlPINVOKE.ExecuteReset();
    return ret;
  }

  private static void VariableRegister(int number, int variableTransient, IntPtr variableAddress) {
    HDFqlPINVOKE.VariableRegister(number, variableTransient, variableAddress);
  }

  private static void VariableUnregister(int number) {
    HDFqlPINVOKE.VariableUnregister(number);
  }

  private static int VariableGetDataType(int number) {
    int ret = HDFqlPINVOKE.VariableGetDataType(number);
    return ret;
  }

  private static int VariableGetCount(int number) {
    int ret = HDFqlPINVOKE.VariableGetCount(number);
    return ret;
  }

  private static int VariableGetSize(int number) {
    int ret = HDFqlPINVOKE.VariableGetSize(number);
    return ret;
  }

  private static int VariableGetDimensionCount(int number) {
    int ret = HDFqlPINVOKE.VariableGetDimensionCount(number);
    return ret;
  }

  private static long VariableGetDimension(int number, int index) {
    long ret = HDFqlPINVOKE.VariableGetDimension(number, index);
    return ret;
  }

  public static int CursorInitialize(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorInitialize(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorUse(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorUse(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorUseDefault() {
    int ret = HDFqlPINVOKE.CursorUseDefault();
    return ret;
  }

  public static int CursorClear(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorClear(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorClone(HDFqlCursor cursorOriginal, HDFqlCursor cursorClone) {
    int ret = HDFqlPINVOKE.CursorClone(HDFqlCursor.getCPtr(cursorOriginal), HDFqlCursor.getCPtr(cursorClone));
    return ret;
  }

  public static int CursorGetDataType(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorGetDataType(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorGetCount(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorGetCount(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorGetCount(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorGetCount(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorGetPosition(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorGetPosition(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorGetPosition(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorGetPosition(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorFirst(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorFirst(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorFirst(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorFirst(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorLast(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorLast(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorLast(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorLast(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorNext(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorNext(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorNext(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorNext(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorPrevious(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorPrevious(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorPrevious(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorPrevious(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorAbsolute(HDFqlCursor cursor, int position) {
    int ret = HDFqlPINVOKE.CursorAbsolute(HDFqlCursor.getCPtr(cursor), position);
    return ret;
  }

  public static int SubcursorAbsolute(HDFqlCursor cursor, int position) {
    int ret = HDFqlPINVOKE.SubcursorAbsolute(HDFqlCursor.getCPtr(cursor), position);
    return ret;
  }

  public static int CursorRelative(HDFqlCursor cursor, int position) {
    int ret = HDFqlPINVOKE.CursorRelative(HDFqlCursor.getCPtr(cursor), position);
    return ret;
  }

  public static int SubcursorRelative(HDFqlCursor cursor, int position) {
    int ret = HDFqlPINVOKE.SubcursorRelative(HDFqlCursor.getCPtr(cursor), position);
    return ret;
  }

  public static sbyte ? CursorGetTinyint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetTinyint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		char []value = new char[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (sbyte) value[0];
	}

  public static sbyte ? SubcursorGetTinyint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetTinyint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		char []value = new char[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (sbyte) value[0];
	}

  public static byte ? CursorGetUnsignedTinyint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetUnsignedTinyint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		char []value = new char[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (byte) value[0];
	}

  public static byte ? SubcursorGetUnsignedTinyint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetUnsignedTinyint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		char []value = new char[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (byte) value[0];
	}

  public static short ? CursorGetSmallint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetSmallint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		short []value = new short[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static short ? SubcursorGetSmallint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetSmallint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		short []value = new short[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static ushort ? CursorGetUnsignedSmallint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetUnsignedSmallint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		short []value = new short[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (ushort) value[0];
	}

  public static ushort ? SubcursorGetUnsignedSmallint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetUnsignedSmallint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		short []value = new short[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (ushort) value[0];
	}

  public static int ? CursorGetInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		int []value = new int[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static int ? SubcursorGetInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		int []value = new int[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static uint ? CursorGetUnsignedInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetUnsignedInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		int []value = new int[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (uint) value[0];
	}

  public static uint ? SubcursorGetUnsignedInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetUnsignedInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		int []value = new int[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (uint) value[0];
	}

  public static long ? CursorGetBigint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetBigint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		long []value = new long[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static long ? SubcursorGetBigint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetBigint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		long []value = new long[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static ulong ? CursorGetUnsignedBigint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetUnsignedBigint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		long []value = new long[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (ulong) value[0];
	}

  public static ulong ? SubcursorGetUnsignedBigint(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetUnsignedBigint(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		long []value = new long[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (ulong) value[0];
	}

  public static float ? CursorGetFloat(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetFloat(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		float []value = new float[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static float ? SubcursorGetFloat(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetFloat(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		float []value = new float[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static double ? CursorGetDouble(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetDouble(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		double []value = new double[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static double ? SubcursorGetDouble(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetDouble(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		double []value = new double[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static string CursorGetChar(HDFqlCursor cursor) {
    string ret = HDFqlPINVOKE.CursorGetChar(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static readonly string Version = HDFqlPINVOKE.Version_get();
  public static readonly int Yes = HDFqlPINVOKE.Yes_get();
  public static readonly int No = HDFqlPINVOKE.No_get();
  public static readonly int Enabled = HDFqlPINVOKE.Enabled_get();
  public static readonly int Disabled = HDFqlPINVOKE.Disabled_get();
  public static readonly int Unlimited = HDFqlPINVOKE.Unlimited_get();
  public static readonly int Undefined = HDFqlPINVOKE.Undefined_get();
  public static readonly int Directory = HDFqlPINVOKE.Directory_get();
  public static readonly int File = HDFqlPINVOKE.File_get();
  public static readonly int Group = HDFqlPINVOKE.Group_get();
  public static readonly int Dataset = HDFqlPINVOKE.Dataset_get();
  public static readonly int Attribute = HDFqlPINVOKE.Attribute_get();
  public static readonly int SoftLink = HDFqlPINVOKE.SoftLink_get();
  public static readonly int ExternalLink = HDFqlPINVOKE.ExternalLink_get();
  public static readonly int Tinyint = HDFqlPINVOKE.Tinyint_get();
  public static readonly int UnsignedTinyint = HDFqlPINVOKE.UnsignedTinyint_get();
  public static readonly int Smallint = HDFqlPINVOKE.Smallint_get();
  public static readonly int UnsignedSmallint = HDFqlPINVOKE.UnsignedSmallint_get();
  public static readonly int Int = HDFqlPINVOKE.Int_get();
  public static readonly int UnsignedInt = HDFqlPINVOKE.UnsignedInt_get();
  public static readonly int Bigint = HDFqlPINVOKE.Bigint_get();
  public static readonly int UnsignedBigint = HDFqlPINVOKE.UnsignedBigint_get();
  public static readonly int Float = HDFqlPINVOKE.Float_get();
  public static readonly int Double = HDFqlPINVOKE.Double_get();
  public static readonly int Char = HDFqlPINVOKE.Char_get();
  public static readonly int Vartinyint = HDFqlPINVOKE.Vartinyint_get();
  public static readonly int UnsignedVartinyint = HDFqlPINVOKE.UnsignedVartinyint_get();
  public static readonly int Varsmallint = HDFqlPINVOKE.Varsmallint_get();
  public static readonly int UnsignedVarsmallint = HDFqlPINVOKE.UnsignedVarsmallint_get();
  public static readonly int Varint = HDFqlPINVOKE.Varint_get();
  public static readonly int UnsignedVarint = HDFqlPINVOKE.UnsignedVarint_get();
  public static readonly int Varbigint = HDFqlPINVOKE.Varbigint_get();
  public static readonly int UnsignedVarbigint = HDFqlPINVOKE.UnsignedVarbigint_get();
  public static readonly int Varfloat = HDFqlPINVOKE.Varfloat_get();
  public static readonly int Vardouble = HDFqlPINVOKE.Vardouble_get();
  public static readonly int Varchar = HDFqlPINVOKE.Varchar_get();
  public static readonly int Opaque = HDFqlPINVOKE.Opaque_get();
  public static readonly int Bitfield = HDFqlPINVOKE.Bitfield_get();
  public static readonly int Enumeration = HDFqlPINVOKE.Enumeration_get();
  public static readonly int Compound = HDFqlPINVOKE.Compound_get();
  public static readonly int Reference = HDFqlPINVOKE.Reference_get();
  public static readonly int Global = HDFqlPINVOKE.Global_get();
  public static readonly int Local = HDFqlPINVOKE.Local_get();
  public static readonly int Tracked = HDFqlPINVOKE.Tracked_get();
  public static readonly int Indexed = HDFqlPINVOKE.Indexed_get();
  public static readonly int Contiguous = HDFqlPINVOKE.Contiguous_get();
  public static readonly int Compact = HDFqlPINVOKE.Compact_get();
  public static readonly int Chunked = HDFqlPINVOKE.Chunked_get();
  public static readonly int Early = HDFqlPINVOKE.Early_get();
  public static readonly int Incremental = HDFqlPINVOKE.Incremental_get();
  public static readonly int Late = HDFqlPINVOKE.Late_get();
  public static readonly int LittleEndian = HDFqlPINVOKE.LittleEndian_get();
  public static readonly int BigEndian = HDFqlPINVOKE.BigEndian_get();
  public static readonly int MixedEndian = HDFqlPINVOKE.MixedEndian_get();
  public static readonly int Ascii = HDFqlPINVOKE.Ascii_get();
  public static readonly int Utf8 = HDFqlPINVOKE.Utf8_get();
  public static readonly int FillDefault = HDFqlPINVOKE.FillDefault_get();
  public static readonly int FillDefined = HDFqlPINVOKE.FillDefined_get();
  public static readonly int FillNever = HDFqlPINVOKE.FillNever_get();
  public static readonly int FillUndefined = HDFqlPINVOKE.FillUndefined_get();
  public static readonly int Earliest = HDFqlPINVOKE.Earliest_get();
  public static readonly int Latest = HDFqlPINVOKE.Latest_get();
  public static readonly int Version18 = HDFqlPINVOKE.Version18_get();
  public static readonly int Success = HDFqlPINVOKE.Success_get();
  public static readonly int ErrorParse = HDFqlPINVOKE.ErrorParse_get();
  public static readonly int ErrorNotSpecified = HDFqlPINVOKE.ErrorNotSpecified_get();
  public static readonly int ErrorNotFound = HDFqlPINVOKE.ErrorNotFound_get();
  public static readonly int ErrorNoAccess = HDFqlPINVOKE.ErrorNoAccess_get();
  public static readonly int ErrorNotOpen = HDFqlPINVOKE.ErrorNotOpen_get();
  public static readonly int ErrorInvalidName = HDFqlPINVOKE.ErrorInvalidName_get();
  public static readonly int ErrorInvalidFile = HDFqlPINVOKE.ErrorInvalidFile_get();
  public static readonly int ErrorNotSupported = HDFqlPINVOKE.ErrorNotSupported_get();
  public static readonly int ErrorNotEnoughSpace = HDFqlPINVOKE.ErrorNotEnoughSpace_get();
  public static readonly int ErrorNotEnoughMemory = HDFqlPINVOKE.ErrorNotEnoughMemory_get();
  public static readonly int ErrorAlreadyExists = HDFqlPINVOKE.ErrorAlreadyExists_get();
  public static readonly int ErrorEmpty = HDFqlPINVOKE.ErrorEmpty_get();
  public static readonly int ErrorFull = HDFqlPINVOKE.ErrorFull_get();
  public static readonly int ErrorBeforeFirst = HDFqlPINVOKE.ErrorBeforeFirst_get();
  public static readonly int ErrorAfterLast = HDFqlPINVOKE.ErrorAfterLast_get();
  public static readonly int ErrorOutsideLimit = HDFqlPINVOKE.ErrorOutsideLimit_get();
  public static readonly int ErrorNoAddress = HDFqlPINVOKE.ErrorNoAddress_get();
  public static readonly int ErrorUnexpectedType = HDFqlPINVOKE.ErrorUnexpectedType_get();
  public static readonly int ErrorUnexpectedDataType = HDFqlPINVOKE.ErrorUnexpectedDataType_get();
  public static readonly int ErrorUnexpectedStorageType = HDFqlPINVOKE.ErrorUnexpectedStorageType_get();
  public static readonly int ErrorDanglingLink = HDFqlPINVOKE.ErrorDanglingLink_get();
  public static readonly int ErrorNotRegistered = HDFqlPINVOKE.ErrorNotRegistered_get();
  public static readonly int ErrorInvalidRegularExpression = HDFqlPINVOKE.ErrorInvalidRegularExpression_get();
  public static readonly int ErrorInvalidSelection = HDFqlPINVOKE.ErrorInvalidSelection_get();
  public static readonly int ErrorUnknown = HDFqlPINVOKE.ErrorUnknown_get();
  private static readonly int CSharp = HDFqlPINVOKE.CSharp_get();
}

}

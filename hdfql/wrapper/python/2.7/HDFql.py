# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HDFql')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HDFql')
    _HDFql = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HDFql', [dirname(__file__)])
        except ImportError:
            import _HDFql
            return _HDFql
        try:
            _mod = imp.load_module('_HDFql', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HDFql = swig_import_helper()
    del swig_import_helper
else:
    import _HDFql
# pull in all the attributes from _HDFql
if __name__.rpartition('.')[0] != '':
    if _swig_python_version_info >= (2, 7, 0):
        try:
            from ._HDFql import *
        except ImportError:
            from _HDFql import *
    else:
        from _HDFql import *
else:
    from _HDFql import *
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


_numpy = None
_variable_list = [None] * 5


def execute(script):
	if script is None:
		return _HDFql.execute_reset()

	try:
		status = _HDFql.execute(script, len(script), _HDFql._PYTHON)
	except:
		try:
			tmp = script.encode("utf-8")
			status = _HDFql.execute(tmp, len(tmp), _HDFql._PYTHON)
		except:
			return _HDFql.ERROR_UNKNOWN

	if (status & 0x100) != 0:   # check if a transient variable was used
		for i in (0, 1, 2, 3, 4):
			if (status & (1 << (i + 9))) != 0:
				_variable_list[i] = None
		status &= 0x000000FF

	if status > 127:
		return status - 256
	else:
		return status


def cursor_clone(*argument_list):
	i = len(argument_list)
	if i == 1:
		return _HDFql.cursor_clone(None, argument_list[0])
	elif i == 2:
		return _HDFql.cursor_clone(argument_list[0], argument_list[1])
	else:
		raise TypeError("cursor_clone() takes 1 or 2 arguments (%d given)" % i)


def variable_register(numpy_array):
	return _variable_register(numpy_array, _HDFql.NO)


def variable_transient_register(numpy_array):
	return _variable_register(numpy_array, _HDFql.YES)


def variable_unregister(numpy_array):
	global _variable_list

	try:
		address = numpy_array.__array_interface__["data"][0]
	except:
		return _HDFql.ERROR_NO_ADDRESS

	for i in (0, 1, 2, 3, 4):
		if address == _variable_list[i]:
			_HDFql.variable_unregister(i)
			_variable_list[i] = None
			return _HDFql.SUCCESS

	return _HDFql.ERROR_NOT_REGISTERED


def variable_unregister_all():
	global _variable_list

	for i in (0, 1, 2, 3, 4):
		if _variable_list[i] is not None:
			_HDFql.variable_unregister(i)
			_variable_list[i] = None

	return _HDFql.SUCCESS


def variable_get_number(numpy_array):
	try:
		address = numpy_array.__array_interface__["data"][0]
	except:
		return _HDFql.ERROR_NO_ADDRESS

	for i in (0, 1, 2, 3, 4):
		if address == _variable_list[i]:
			return i

	return _HDFql.ERROR_NOT_REGISTERED


def variable_get_data_type(numpy_array):
	try:
		address = numpy_array.__array_interface__["data"][0]
	except:
		return _HDFql.ERROR_NO_ADDRESS

	for i in (0, 1, 2, 3, 4):
		if address == _variable_list[i]:
			return _HDFql.variable_get_data_type(i)

	return _HDFql.ERROR_NOT_REGISTERED


def variable_get_count(numpy_array):
	try:
		address = numpy_array.__array_interface__["data"][0]
	except:
		return _HDFql.ERROR_NO_ADDRESS

	for i in (0, 1, 2, 3, 4):
		if address == _variable_list[i]:
			return _HDFql.variable_get_count(i)

	return _HDFql.ERROR_NOT_REGISTERED


def variable_get_size(numpy_array):
	try:
		address = numpy_array.__array_interface__["data"][0]
	except:
		return _HDFql.ERROR_NO_ADDRESS

	for i in (0, 1, 2, 3, 4):
		if address == _variable_list[i]:
			return _HDFql.variable_get_size(i)

	return _HDFql.ERROR_NOT_REGISTERED


def variable_get_dimension_count(numpy_array):
	try:
		address = numpy_array.__array_interface__["data"][0]
	except:
		return _HDFql.ERROR_NO_ADDRESS

	for i in (0, 1, 2, 3, 4):
		if address == _variable_list[i]:
			return _HDFql.variable_get_dimension_count(i)

	return _HDFql.ERROR_NOT_REGISTERED


def variable_get_dimension(numpy_array, index):
	try:
		address = numpy_array.__array_interface__["data"][0]
	except:
		return _HDFql.ERROR_NO_ADDRESS

	for i in (0, 1, 2, 3, 4):
		if address == _variable_list[i]:
			return _HDFql.variable_get_dimension(i, index)

	return _HDFql.ERROR_NOT_REGISTERED


def _variable_register(numpy_array, transient):
	global _numpy
	global _variable_list

	try:
		address = numpy_array.__array_interface__["data"][0]
	except:
		return _HDFql.ERROR_NO_ADDRESS

	if _numpy is None:
		import numpy as _numpy

	if numpy_array.dtype.type not in (_numpy.int8, _numpy.uint8, _numpy.int16, _numpy.uint16, _numpy.int32, _numpy.uint32, _numpy.int64, _numpy.uint64, _numpy.float32, _numpy.float64, _numpy.string_, _numpy.ubyte, _numpy.void):
		return _HDFql.ERROR_UNEXPECTED_DATA_TYPE

	number = -1
	for i in (0, 1, 2, 3, 4):
		if _variable_list[i] is None:
			if number == -1:
				number = i
		else:
			if address == _variable_list[i]:
				_HDFql.variable_register(i, transient, address)
				return i

	if number == -1:
		return _HDFql.ERROR_FULL

	_HDFql.variable_register(number, transient, address)
	_variable_list[number] = address

	return number


# This file is compatible with both classic and new-style classes.


